namespace: Cerner.DFMP.Schedulers.Error_Framework.Operations
operation:
  name: CreateAlertBodyErrorLogs
  inputs:
    - data_json: ''
    - signature: "${get_sp('Cerner.DigitalFactory.Error_Notification.signature')}"
    - smax_url: "${get_sp('Cerner.DigitalFactory.SMAX.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n# Operation: CreateAlertBodyErrorLogs\r\n#\r\n#   Author: Rakesh Sharma Cerner (rakesh.sharma@cerner.com)\r\n#   Inputs:\r\n#       - data_json\r\n#       - signature\r\n#       - smax_url\r\n#\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - operator_email\r\n#       - errorType\r\n#       - errorMessage\r\n#   Created On:15 Jul 2022\r\n#  -------------------------------------------------------------\r\n###############################################################\r\n\r\ndef execute(data_json, signature, smax_url):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorMessage = ''\r\n    errorType = ''\r\n    alert_body = \"\"\r\n    entity_ids = ''\r\n\r\n    try:\r\n        import json\r\n        alert_body = '<html><head>'\r\n        alert_body += '<style> table, th, td {   border:1px solid black;   border-collapse: collapse; }</style>'\r\n        alert_body += '</head> <body><p>Dear Operator,<br><br>Below is the list of <b>Error Logs of Failed records / transactions from Schedule Runs</b>:'\r\n\r\n        alert_body += '<table>  <tr> <th style=\"width:40px\">Error Log Time</th> <th style=\"width:40px\">Schedule Name</th> <th style=\"width:40px\">MP Request#</th> <th style=\"width:40px\">Jira Issue#</th>'\r\n        alert_body += '<th style=\"width:30px\">Provider</th><th>Provider URL</th><th>URL Body</th><th>Error</th></tr>'\r\n\r\n        if '\\n' in data_json:\r\n            data_json = data_json.strip().replace('\\n', '\\\\n')\r\n        data_json = data_json.replace('\\|\\|','\\\\\\|\\\\\\|')\r\n\r\n        data = json.loads(data_json)\r\n\r\n        for record in data:\r\n            if record:\r\n                entity_id = record[\"Id\"]\r\n                entity_ids += str(entity_id) + ','\r\n                created_time = record[\"EmsCreationTime\"]\r\n                cst_dt = unixToCSTDate(created_time)[\"cst_date\"]\r\n                schedule_name = record[\"ScheduleName_c\"]\r\n                mp_request_id = record[\"SMAXRequestId_c\"]\r\n                jira_issue_id = record[\"JiraIssueId_c\"]\r\n                error_provider = record[\"ErrorProvider_c\"]\r\n                provider_url = record[\"ProviderUrl_c\"]\r\n                provider_url_body = record[\"ProviderUrlBody_c\"]\r\n                error_message = record.get(\"ErrorMessage_c\")\r\n                if not error_message:\r\n                    error_message = 'Check the error log in Error Logs Tracker, Error Log size/format is inconsistent for this mail Notification'\r\n\r\n                alert_body += '<tr><td>{0}</td><td>{1}</td> <td>{2}</td><td>{3}</td>'.format(cst_dt, schedule_name,\r\n                                                                                             mp_request_id,\r\n                                                                                             jira_issue_id)\r\n                alert_body += '<td>{0}</td><td>{1}</td> <td>{2}</td><td>{3}</td> </tr>'.format(error_provider,\r\n                                                                                               provider_url,\r\n                                                                                               provider_url_body,\r\n                                                                                               error_message)\r\n        alert_body += '</table>'\r\n        alert_body += '<br>All these Error Logs can also be accessed at <b> <a href=\"{0}/saw/custom/ErrorLogs_c\">Error Logs Tracker</a></b>'.format(\r\n            smax_url)\r\n        alert_body += '<br>After Issue has been fixed, change the status of field <b>Required Action Status</b> to \"ReTry\"  in the \"Error Logs Tracker\" to re run the trasnactions sync'\r\n        alert_body += '<br><br>Yours Sincerely,<br>'\r\n        alert_body += signature + '<br> ----------------------------------------------------------------'\r\n        alert_body += '</body></html>'\r\n\r\n        result = \"True\"\r\n        message = \"Operator email body succesfully created\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = 'e10000'\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"alert_body\": alert_body, \"entity_ids\": entity_ids,\r\n            \"errorType\": errorType,\r\n            \"errorMessage\": errorMessage}\r\n\r\n\r\n##Fucntion to convert UNix TS to CST Time\r\ndef unixToCSTDate(dt):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorMessage = ''\r\n    errorType = ''\r\n    cst_date = ''\r\n\r\n    try:\r\n        from datetime import datetime\r\n        import pytz\r\n        dt = str(dt)[:10]\r\n        dt = int(dt)\r\n        tt = datetime.fromtimestamp(dt)\r\n        YY = tt.strftime(\"%Y\")\r\n        MM = tt.strftime(\"%m\")\r\n        DD = tt.strftime(\"%d\")\r\n        HH = tt.strftime(\"%H\")\r\n        MI = tt.strftime(\"%M\")\r\n        SS = tt.strftime(\"%S\")\r\n        utc_date = datetime(int(YY), int(MM), int(DD), int(HH), int(MI), int(SS), tzinfo=pytz.utc)\r\n\r\n        cst_date = utc_date.astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M:%S %Z%z')\r\n\r\n        message = cst_date\r\n        result = 'True'\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = 'e10000'\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"cst_date\": cst_date, \"errorType\": errorType,\r\n            \"errorMessage\": errorMessage}"
  outputs:
    - alert_body
    - result
    - message
    - errorType
    - errorMessage
    - entity_ids
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
